@using PokemonTypeLibrary.Models
@using System.Drawing
@using System.Linq
<PageTitle>Pokemon Type Calculator</PageTitle>

<body>
    <fieldset name="defendingTypes" class="border-2 mud-border-primary" style="margin:5px 0px 5px 0px;">
        <legend style="margin-inline:5px;">Defending Pokemon Types</legend>
        <MudSimpleTable Style="border-collapse:collapse; width:100%; padding:0px 5px 5px 5px;">
            <tr>
                <td>
                    <PokemonTypeSelect Label="Primary Type" PkmnTypeList="@PrimaryPkmnTypeList" SelectedTypeColor="@SelectedPrimaryTypeColor"
                    @bind-SelectedTypeName="SelectedPrimaryTypeName" Selected2ndTypeName="@SelectedSecondaryTypeName" />
                </td>
                <td>
                        <PokemonTypeSelect Label="Secondary Type" PkmnTypeList="@SecondaryPkmnTypeList" SelectedTypeColor="@SelectedSecondaryTypeColor"
                    @bind-SelectedTypeName="SelectedSecondaryTypeName" Selected2ndTypeName="@SelectedPrimaryTypeName" />
                </td>
            </tr>
        </MudSimpleTable>
    </fieldset>
    @if (SelectedPrimaryTypeName != emptyTypeName || SelectedSecondaryTypeName != emptyTypeName)
    {
        <MudTable Dense="true" Bordered="false" Items="@PkmnTypeList.Where(x => x is not EmptyPkmnType)" Hover="true" SortLabel="Sort By">
            <ColGroup>
                    <col style="width:50%;"/>
                    <col style="width:50%;"/>
            </ColGroup>
            <HeaderContent>
                <MudTh Style="text-align:center"><MudTableSortLabel SortBy="new Func<IPkmnType, object>(x => x.TypeName)">Type</MudTableSortLabel></MudTh>
                <MudTh Style="text-align:center"><MudTableSortLabel SortBy="new Func<IPkmnType, object>(x => x.DmgMultiplier)">Damage Multiplier</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="@($"color:{context.TypeColor};text-align:center")" DataLabel="Type">@context.TypeName</MudTd>
                <MudTd Style="@($"color:{context.TypeColor};text-align:center")" DataLabel="Damage Multiplier">@($"{context.DmgMultiplier}x")</MudTd>
            </RowTemplate>
        </MudTable>
    }
</body>
@code {
    public static string emptyTypeName = PkmnTypeFactory.CreateEmptyPkmnType().TypeName;
    public List<IPkmnType> PrimaryPkmnTypeList { get; set; } = PkmnTypeFactory.GeneratePkmnTypeList();
    public List<IPkmnType> SecondaryPkmnTypeList { get; set; } = PkmnTypeFactory.GeneratePkmnTypeList();
    private string _selectedPrimaryTypeName = emptyTypeName;
    public string SelectedPrimaryTypeName
    {
        get => _selectedPrimaryTypeName;
        set
        {
            _selectedPrimaryTypeName = value;
            Calculate();
        }
    }

    private string _selectedSecondaryTypeName = emptyTypeName;

    public string SelectedSecondaryTypeName
    {
        get => _selectedSecondaryTypeName;
        set
        {
            _selectedSecondaryTypeName = value;
            Calculate();
        }
    }

    public List<IPkmnType> PkmnTypeList { get; set; } = PkmnTypeFactory.GeneratePkmnTypeList();

    public string SelectedPrimaryTypeColor { get => SelectedPrimaryType.TypeColor; }

    public string SelectedSecondaryTypeColor { get => SelectedSecondaryType.TypeColor; }
    private IPkmnType _selectedPrimaryType = PkmnTypeFactory.CreateEmptyPkmnType();
    private IPkmnType _selectedSecondaryType = PkmnTypeFactory.CreateEmptyPkmnType();

    public IPkmnType SelectedPrimaryType
    {
        get => PrimaryPkmnTypeList.Where(type => type.TypeName == SelectedPrimaryTypeName).Single();
        set => _selectedPrimaryType = value;
    }
    public IPkmnType SelectedSecondaryType
    {
        get => SecondaryPkmnTypeList.Where(type => type.TypeName == SelectedSecondaryTypeName).Single();
        set => _selectedSecondaryType = value;
    }

    public void Calculate()
    {
        if (SelectedPrimaryTypeName == emptyTypeName && SelectedSecondaryTypeName == emptyTypeName)
            return;

        // calculate damage multiplier for each pkmn type in the list
        foreach (var pkmnType in PkmnTypeList)
        {
            pkmnType.DmgMultiplier = pkmnType.CalculateDmgMultiplier(SelectedPrimaryType, SelectedSecondaryType);
        }

        // sort by damage multiplier from highest to lowest
        PkmnTypeList.Sort((x, y) => y.DmgMultiplier.CompareTo(x.DmgMultiplier));
    }
}

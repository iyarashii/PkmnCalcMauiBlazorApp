@using PokemonTypeLibrary.Models
@using System.Drawing
@using System.Linq
<PageTitle>Pokemon Type Calculator</PageTitle>
<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        position:relative;
        float:right;
        right:5px;
    }
</style>

<body class="bg-dark text-white">
    <MudPaper>
        <fieldset class="border-solid border-2 mud-border-primary pa-4" style="margin:10px;">
        <legend style="margin-inline:5px;">Defending Pokemon Types</legend>
        <MudSimpleTable Style="border-collapse:collapse; width:100%; padding:5px;">
            <tr>
                <td>Primary Type</td>
                <td>Secondary Type</td>
            </tr>
            <tr>
                <td>
                    <MudSelect Dense="true" MaxHeight="-1" T="string" Label="Primary Type" AnchorOrigin="Origin.BottomCenter" @bind-Value="@SelectedPrimaryTypeName"
                    Style="@($"-webkit-text-fill-color:{SelectedPrimaryTypeColor}")">
                        @foreach (var pkmnType in PrimaryPkmnTypeList)
                        {
                            bool isSelected = false, isHidden = false, isDisabled = false;
                            if (pkmnType.TypeName == SelectedPrimaryTypeName)
                                isSelected = true;
                            else if (pkmnType.TypeName == SelectedSecondaryTypeName && pkmnType.TypeName != emptyTypeName)
                                isHidden = isDisabled = true;
                            <MudSelectItem Value="pkmnType.TypeName" 
                            Style="@($"color:{pkmnType.TypeColor};display:{(isHidden ? "none" : string.Empty)};-webkit-text-fill-color:{pkmnType.TypeColor}")" 
                            Disabled="isDisabled" />
                        }
                    </MudSelect>
                </td>
                <td>
                    <MudSelect T="string" Dense="true" MaxHeight="1000" Label="Secondary Type" AnchorOrigin="Origin.BottomCenter" Style="@($"-webkit-text-fill-color:{SelectedSecondaryTypeColor}")" @bind-Value="@SelectedSecondaryTypeName">
                        @foreach (var pkmnType in SecondaryPkmnTypeList)
                        {
                            bool isSelected = false, isHidden = false, isDisabled = false;
                            if (pkmnType.TypeName == SelectedSecondaryTypeName)
                                isSelected = true;
                            else if (pkmnType.TypeName == SelectedPrimaryTypeName && pkmnType.TypeName != emptyTypeName)
                                isHidden = isDisabled = true;
                            <MudSelectItem Value="@pkmnType.TypeName" Style="@($"color:{pkmnType.TypeColor};display:{(isHidden ? "none" : string.Empty)};-webkit-text-fill-color:{pkmnType.TypeColor}")" Disabled="isDisabled" />
                        }
                    </MudSelect>
                </td>
            </tr>
        </MudSimpleTable>
    </fieldset>
    @if (SelectedPrimaryTypeName != emptyTypeName || SelectedSecondaryTypeName != emptyTypeName)
    {
        <MudTable Dense="true" Bordered="true" Items="@PkmnTypeList.Where(x => x is not EmptyPkmnType)" Hover="true" SortLabel="Sort By">
            <ColGroup>
                    <col style="width:50%;"/>
                    <col style="width:50%;"/>
            </ColGroup>
            <HeaderContent>
                <MudTh Style="text-align:center"><MudTableSortLabel SortBy="new Func<IPkmnType, object>(x => x.TypeName)">Type</MudTableSortLabel></MudTh>
                <MudTh Style="text-align:center"><MudTableSortLabel SortBy="new Func<IPkmnType, object>(x => x.DmgMultiplier)">Damage Multiplier</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="@($"color:{context.TypeColor};text-align:center")" DataLabel="Type">@context.TypeName</MudTd>
                <MudTd Style="@($"color:{context.TypeColor};text-align:center")" DataLabel="Damage Multiplier">@($"{context.DmgMultiplier}x")</MudTd>
            </RowTemplate>
        </MudTable>
    }
    </MudPaper>
</body>
@code {
    private bool isSortedAscending;
    private string activeSortColumn;
    private void SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            PkmnTypeList = PkmnTypeList.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                PkmnTypeList =  PkmnTypeList.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                PkmnTypeList = PkmnTypeList.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            isSortedAscending = !isSortedAscending;
        }
    }
    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }
    public static string emptyTypeName = PkmnTypeFactory.CreateEmptyPkmnType().TypeName;
    public List<IPkmnType> PrimaryPkmnTypeList { get; set; } = PkmnTypeFactory.GeneratePkmnTypeList();
    public List<IPkmnType> SecondaryPkmnTypeList { get; set; } = PkmnTypeFactory.GeneratePkmnTypeList();
    private string _selectedPrimaryTypeName = emptyTypeName;
    public string SelectedPrimaryTypeName
    {
        get => _selectedPrimaryTypeName;
        set
        {
            _selectedPrimaryTypeName = value;
            Calculate();
        }
    }

    private string _selectedSecondaryTypeName = emptyTypeName;

    public string SelectedSecondaryTypeName
    {
        get => _selectedSecondaryTypeName;
        set
        {
            _selectedSecondaryTypeName = value;
            Calculate();
        }
    }


    // collection used by objectlistview
    public List<IPkmnType> PkmnTypeList { get; set; } = PkmnTypeFactory.GeneratePkmnTypeList();

    public string SelectedPrimaryTypeColor { get => SelectedPrimaryType.TypeColor; }

    public string SelectedSecondaryTypeColor { get => SelectedSecondaryType.TypeColor; }
    private IPkmnType _selectedPrimaryType = PkmnTypeFactory.CreateEmptyPkmnType();
    private IPkmnType _selectedSecondaryType = PkmnTypeFactory.CreateEmptyPkmnType();

    public IPkmnType SelectedPrimaryType
    {
        get => PrimaryPkmnTypeList.Where(type => type.TypeName == SelectedPrimaryTypeName).Single();
        set => _selectedPrimaryType = value;
    }
    public IPkmnType SelectedSecondaryType
    {
        get => SecondaryPkmnTypeList.Where(type => type.TypeName == SelectedSecondaryTypeName).Single();
        set => _selectedSecondaryType = value;
    }

    public void Calculate()
    {
        if (SelectedPrimaryTypeName == emptyTypeName && SelectedSecondaryTypeName == emptyTypeName)
            return;

        // calculate damage multiplier for each pkmn type in the list
        foreach (var pkmnType in PkmnTypeList)
        {
            pkmnType.DmgMultiplier = pkmnType.CalculateDmgMultiplier(SelectedPrimaryType, SelectedSecondaryType);
        }

        // sort by damage multiplier from highest to lowest
        PkmnTypeList.Sort((x, y) => y.DmgMultiplier.CompareTo(x.DmgMultiplier));
    }
}

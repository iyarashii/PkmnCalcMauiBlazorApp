@*// Copyright (c) 2022 iyarashii @ https://github.com/iyarashii
// Licensed under the GNU General Public License v3.0.*@
@page "/pokedex"
@using System.Net;
@using System.Text.RegularExpressions;
@using Logic;
@inject IDialogService DialogService

<PokedexSelect Label="Pokedex Type" @bind-SelectedPokedexType="SelectedPokedexType" @bind-PokedexSource="PokedexSource" />
@if(IsDebug())
{
<p>Path to names: @pathToPokemonNames</p>
<p>Dex src: @PokedexSource</p>
<p>Iframe src: @(PokedexSource + ((!string.IsNullOrEmpty(PokemonName) && char.IsDigit(PokemonName[0])) 
                                ? PokemonName.Substring(0, 3) + ".shtml" 
                                : PokemonName?.Replace(" ", "").ToLower()))</p>
}
<MudAutocomplete AutoFocus="true" accesskey="f" T="string" Label="Pokemon Name" @bind-Value="PokemonName" SearchFunc="@SearchForPokemonName"
                 ResetValueOnEmptyText="true"
                 CoerceText="true" CoerceValue="false"
                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
<MudButton Variant="Variant.Filled" OnClick="OpenSavePokemonDataDialog" >Save list of pokemon names from @SelectedPokedexType.Name</MudButton>
<MudPaper Height="1080px">
    <iframe id="serebiiPokedex" src="@(PokedexSource + 
    ((!string.IsNullOrEmpty(PokemonName) && char.IsDigit(PokemonName[0])) 
    ? PokemonName.Substring(0, 3) + ".shtml" 
    : PokemonName?.Replace(" ", "").ToLower()))" />
</MudPaper>
@code {
    private static IPokedexType selectedPokedexType = new ScarletVioletPokedex();
    public string PokedexSource { get; set; } = "https://www.serebii.net/pokedex-sv/";
    public string PokemonName { get; set; } = "";
    #if DEBUG && WINDOWS
    private static string pathToPokemonNames = $@"G:\repos\PkmnCalcMauiBlazor\PokemonCalcMauiBlazor\Data\{SelectedPokedexType.FileName}";
    #else
    private static string pathToPokemonNames = Path.Combine(FileSystem.Current.AppDataDirectory, SelectedPokedexType.FileName);
#endif
    public static IPokedexType SelectedPokedexType
    {
        get => selectedPokedexType;
        set
        {
            selectedPokedexType = value;
            #if DEBUG && WINDOWS
    pathToPokemonNames = $@"G:\repos\PkmnCalcMauiBlazor\PokemonCalcMauiBlazor\Data\{SelectedPokedexType.FileName}";
            #else
            pathToPokemonNames = Path.Combine(FileSystem.Current.AppDataDirectory, SelectedPokedexType.FileName);
            #endif
        }
    }
    private async Task<IEnumerable<string>> SearchForPokemonName(string pokemonName)
    {
        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(pokemonName))
            return new string[0];
        var names = await File.ReadAllLinesAsync(pathToPokemonNames);
        return names.Where(x => x.Contains(pokemonName, StringComparison.InvariantCultureIgnoreCase));
    }

    public async Task SavePokemonNames()
    {
        using (HttpClient client = new HttpClient())
        {
            string downloadString = await client.GetStringAsync(PokedexSource);
            if (SelectedPokedexType is SwordShieldPokedex)
                downloadString = downloadString.Split("</SELECT> </FORM></td></tr></table><option value=\"/pokedex-swsh/")[0];
            var pokemonNameMatches = Regex.Matches(downloadString, SelectedPokedexType.Regex);
            HashSet<string> pokemonNamesToSave = new();
            foreach (Match pokemonNameMatch in pokemonNameMatches)
            {
                if (SelectedPokedexType is XyPokedex || SelectedPokedexType is SunMoonPokedex)
                {
                    var pokemonNumber = pokemonNameMatch.Value.Substring(0, 3);
                    if (pokemonNumber == pokemonNameMatch.Value.Substring(11, 3))
                    {
                        var pokemonName = Regex.Replace(pokemonNameMatch.Value, "</option>", "").Remove(0, 14).Trim();
                        pokemonNamesToSave.Add($"{pokemonNumber} {pokemonName}");
                    }
                }
                else if (SelectedPokedexType is RedBluePokedex || SelectedPokedexType is GoldSilverPokedex 
                    || SelectedPokedexType is RubySapphirePokedex || SelectedPokedexType is DiamondPearlPokedex
                    || SelectedPokedexType is BlackWhitePokedex || SelectedPokedexType is SwordShieldPokedex)
                    pokemonNamesToSave.Add(pokemonNameMatch.Value.Trim());
                else
                    pokemonNamesToSave.Add(Regex.Replace(pokemonNameMatch.Value, "\\d+? ", "").Trim());
            }
            File.WriteAllLines(pathToPokemonNames, pokemonNamesToSave);
        }
        StateHasChanged();
    }

    private async Task OpenSavePokemonDataDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, NoHeader = true };
        var dialogRef = DialogService.Show<SavePokemonDataDialog>("", options);
        if (await dialogRef.GetReturnValueAsync<bool?>() ?? false)
        {
            await SavePokemonNames();
        }
    }

    public static bool IsDebug()
    {
    #if DEBUG
          return true;
    #else
          return false;
    #endif
    }
}


@using PokemonTypeLibrary.Models;
@inherits TestContext
These tests are written entirely in razor and C# syntax.

Learn more at https://bunit.dev/docs/getting-started/writing-tests.html#creating-basic-tests-in-razor-files

@code {
    [Fact]
	public void VerifyPrimaryTypeDefaultSelection()
	{
		// Arrange
		Services.AddMudServices();
		JSInterop.SetupVoid("mudPopover.initialize", "mudblazor-main-content", 0);
		JSInterop.SetupVoid("mudKeyInterceptor.connect", _ => true);
		var cut = Render(@<PokemonTypeCalculator />);

		// Assert that content of the paragraph shows counter at zero
		var primaryTypeSelect = cut.FindComponent<PokemonTypeSelect>();
		var expectedType = PkmnTypeFactory.CreateEmptyPkmnType();

		// Assert
		Assert.Equal(expectedType.TypeName, primaryTypeSelect.Instance.SelectedTypeName);
		Assert.Equal(expectedType.TypeColor, primaryTypeSelect.Instance.SelectedTypeColor);
	}

	[Fact]
	public void VerifyDefendingPokemonTypeLegendMarkup()
	{
		// Arrange
		Services.AddMudServices();
		JSInterop.SetupVoid("mudPopover.initialize", "mudblazor-main-content", 0);
		JSInterop.SetupVoid("mudKeyInterceptor.connect", _ => true);
		var cut = Render(@<PokemonTypeCalculator />);

		// Assert
		cut.Find("legend").MarkupMatches(@<legend style="margin-inline:5px;">Defending Pokemon Types</legend>);
	}
	//   [Fact]
	//public void VerifySecondaryTypeDefaultSelection()
	//{
	//	// Arrange
	//	var cut = Render(@<Counter />);

	//	// Act - click button to increment counter
	//	cut.Find("button").Click();

	//	// Assert that the counter was incremented
	//	cut.Find("p").MarkupMatches(@<p>Current count: 1</p>);
	//}
}

@using PokemonTypeLibrary.Models;
@inherits TestContext
These tests are written entirely in razor and C# syntax.

Learn more at https://bunit.dev/docs/getting-started/writing-tests.html#creating-basic-tests-in-razor-files

@code {
    [Fact]
	public void VerifyPrimaryTypeDefaultSelection()
	{
		// Arrange
		Services.AddMudServices();
		JSInterop.SetupVoid("mudPopover.initialize", "mudblazor-main-content", 0);
		JSInterop.SetupVoid("mudKeyInterceptor.connect", _ => true);
		var cut = Render(@<PokemonTypeCalculator />);
		var primaryTypeSelect = cut.FindComponent<PokemonTypeSelect>();
		var expectedType = PkmnTypeFactory.CreateEmptyPkmnType();

		// Assert
		Assert.Equal(expectedType.TypeName, primaryTypeSelect.Instance.SelectedTypeName);
		Assert.Equal(expectedType.TypeColor, primaryTypeSelect.Instance.SelectedTypeColor);
		Assert.Equal("Primary Type", primaryTypeSelect.Instance.Label);
	}

	[Fact]
	public void VerifyDefendingPokemonTypeLegendMarkup()
	{
		// Arrange
		Services.AddMudServices();
		JSInterop.SetupVoid("mudPopover.initialize", "mudblazor-main-content", 0);
		JSInterop.SetupVoid("mudKeyInterceptor.connect", _ => true);
		var cut = Render(@<PokemonTypeCalculator />);

		// Assert
		cut.Find("legend").MarkupMatches(@<legend style="margin-inline:5px;">Defending Pokemon Types</legend>);
	}

	[Fact]
	public void VerifySecondaryTypeDefaultSelection()
	{
		// Arrange
		Services.AddMudServices();
		JSInterop.SetupVoid("mudPopover.initialize", "mudblazor-main-content", 0);
		JSInterop.SetupVoid("mudKeyInterceptor.connect", _ => true);
		var cut = Render(@<PokemonTypeCalculator />);
		var secondaryTypeSelect = cut.FindComponents<PokemonTypeSelect>().First(x => x.Instance.Label == "Secondary Type");
		var expectedType = PkmnTypeFactory.CreateEmptyPkmnType();

		// Assert
		Assert.Equal(expectedType.TypeName, secondaryTypeSelect.Instance.SelectedTypeName);
		Assert.Equal(expectedType.TypeColor, secondaryTypeSelect.Instance.SelectedTypeColor);
		Assert.Equal("Secondary Type", secondaryTypeSelect.Instance.Label);
	}
}
